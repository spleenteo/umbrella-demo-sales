/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query About($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  page(\n    filter: {label: {eq: \"About\"}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    sections {\n      ... on AboutIntroRecord {\n        id\n        _modelApiKey\n        preHeader\n        header\n        subheader\n        introductionText {\n          value\n        }\n        images {\n          id\n          responsiveImage {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n      ... on StatsSectionRecord {\n        _modelApiKey\n        id\n        title\n        subtitle\n        statistic {\n          id\n          label\n          quantity\n          icon {\n            url\n          }\n        }\n      }\n      ... on TeamSectionRecord {\n        _modelApiKey\n        id\n        displayOptions\n        title\n        subtitle\n        showcasedMembers {\n          name\n          id\n          slug\n          bio\n          description\n          picture {\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              bgColor\n              base64\n            }\n          }\n        }\n      }\n      ... on FaqSectionRecord {\n        _modelApiKey\n        displayOptions\n        id\n        title\n        subtitle\n        questions {\n          question\n          id\n          answer {\n            value\n          }\n        }\n      }\n    }\n  }\n}": types.AboutDocument,
    "query Author($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  author(filter: {slug: {eq: $slug}}, locale: $locale) {\n    name\n    picture {\n      responsiveImage {\n        srcSet\n        webpSrcSet\n        sizes\n        src\n        width\n        height\n        aspectRatio\n        alt\n        title\n        bgColor\n        base64\n      }\n    }\n    bio\n    description\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: \"100\"\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      _publishedAt\n      slug\n      id\n      title\n      tags {\n        tag\n      }\n      seoTags {\n        description\n        image {\n          responsiveImage {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n      author {\n        name\n        bio\n        slug\n        picture {\n          responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}": types.AuthorDocument,
    "query Changelog($slug: String) {\n  changeLog(filter: {slug: {eq: $slug}}) {\n    timeOfRelease\n    versionName\n    slug\n    content {\n      value\n    }\n  }\n}": types.ChangelogDocument,
    "query CustomColor {\n  layout {\n    mainColor {\n      red\n      blue\n      green\n    }\n  }\n}": types.CustomColorDocument,
    "query DocumentationHomePage {\n  documentationHome {\n    title\n    subheader\n    _modelApiKey\n    id\n    featuredPages {\n      id\n      _modelApiKey\n      title\n      subtitle\n      slug\n    }\n  }\n}": types.DocumentationHomePageDocument,
    "query DocumentationPage($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  documentationPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    title\n    _modelApiKey\n    id\n    content {\n      value\n    }\n  }\n}": types.DocumentationPageDocument,
    "query DocumentationSidebar {\n  allDocumentationPages(filter: {parent: {exists: \"false\"}}) {\n    children {\n      title\n      subtitle\n      slug\n      id\n      _modelApiKey\n      content {\n        value\n      }\n      children {\n        title\n        subtitle\n        slug\n        id\n        _modelApiKey\n        content {\n          value\n        }\n        children {\n          title\n          subtitle\n          slug\n          id\n          _modelApiKey\n          content {\n            value\n          }\n          children {\n            title\n            subtitle\n            slug\n            id\n            _modelApiKey\n            content {\n              value\n            }\n          }\n        }\n      }\n    }\n    title\n    subtitle\n    slug\n    id\n    _modelApiKey\n  }\n  documentationHome {\n    footerText\n    logo {\n      url\n      width\n      height\n    }\n  }\n}": types.DocumentationSidebarDocument,
    "query Footer($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    footerSubtitle\n    footerLogo {\n      url\n      height\n      width\n    }\n    socialMediaLinks {\n      url\n      name\n      id\n      icon {\n        url\n        height\n        width\n      }\n    }\n    footerLinks {\n      ... on LegalPageRecord {\n        id\n        slug\n        title\n        id\n      }\n    }\n  }\n}": types.FooterDocument,
    "query Legal($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    content {\n      value\n    }\n  }\n}": types.LegalDocument,
    "query Locales {\n  _site {\n    locales\n  }\n}": types.LocalesDocument,
    "query Menu($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    menu {\n      ... on MenuItemRecord {\n        id\n        title\n        _modelApiKey\n        page {\n          slug\n        }\n      }\n      ... on MenuDropdownRecord {\n        id\n        title\n        _modelApiKey\n        items {\n          ... on MenuItemRecord {\n            id\n            title\n            _modelApiKey\n            page {\n              slug\n            }\n          }\n        }\n      }\n    }\n    notification {\n      value\n    }\n  }\n  _site {\n    locales\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}": types.MenuDocument,
    "query Page($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $slug: String) {\n  page(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    sections {\n      ... on AboutIntroRecord {\n        id\n        _modelApiKey\n        preHeader\n        header\n        subheader\n        introductionText {\n          value\n        }\n        images {\n          id\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on ChangelogSectionRecord {\n        id\n        _modelApiKey\n        subtitle\n        title\n        featuredVersions {\n          timeOfRelease\n          versionName\n          slug\n          id\n          _modelApiKey\n        }\n      }\n      ... on StatsSectionRecord {\n        _modelApiKey\n        id\n        title\n        subtitle\n        statistic {\n          id\n          label\n          quantity\n          icon {\n            url\n          }\n        }\n      }\n      ... on TeamSectionRecord {\n        _modelApiKey\n        id\n        displayOptions\n        title\n        subtitle\n        showcasedMembers {\n          name\n          id\n          slug\n          bio\n          description\n          picture {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n      }\n      ... on FaqSectionRecord {\n        _modelApiKey\n        displayOptions\n        id\n        title\n        subtitle\n        questions {\n          question\n          id\n          answer {\n            value\n          }\n        }\n      }\n      ... on HeroSectionRecord {\n        buttons {\n          id\n          label\n          primary\n          url\n        }\n        _modelApiKey\n        id\n        heroSubtitle\n        heroTitle\n        displayOptions\n        heroImage {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on VideoSectionRecord {\n        _modelApiKey\n        id\n        videoHeader\n        videoSubheader\n        video {\n          providerUid\n          provider\n          thumbnailUrl\n        }\n        videoThumbnail {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on DetailSectionRecord {\n        _modelApiKey\n        id\n        details {\n          value\n        }\n        imagePosition\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on ReviewSectionRecord {\n        _modelApiKey\n        id\n        reviewSectionHeader\n        reviewSectionSubheader\n        displayOptions\n        reviews {\n          id\n          rating\n          review {\n            value\n            links\n            blocks\n          }\n          reviewerName\n          reviewerPicture {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n          reviewerTitle\n        }\n      }\n      ... on PricingSectionRecord {\n        _modelApiKey\n        id\n        pricingSectionHeader\n        pricingSectionSubheader\n        displayOption\n        plans {\n          id\n          yearlyPrice\n          monthlyPrice\n          tierName\n          tierDescription {\n            value\n          }\n          slug\n          planFeatures\n        }\n      }\n      ... on BrandSectionRecord {\n        _modelApiKey\n        id\n        displayOptions\n        brand {\n          _modelApiKey\n          brandName\n          brandUrl\n          id\n          brandLogo {\n            url\n          }\n        }\n      }\n      ... on FeaturedPostsSectionRecord {\n        _modelApiKey\n        id\n        featuredPostsHeader\n        featuredPostsSubheader\n        displayOptions\n        featuredPosts {\n          _publishedAt\n          slug\n          id\n          title\n          tags {\n            tag\n          }\n          seoTags {\n            description\n            image {\n              responsiveImage {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n          author {\n            name\n            bio\n            slug\n            picture {\n              responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n        }\n      }\n      ... on FeatureListSectionRecord {\n        _modelApiKey\n        id\n        featuresHeader\n        featuresSubheader\n        displayOption\n        feature {\n          _modelApiKey\n          id\n          featureTitle\n          featureDescription\n          featureIcon {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n      }\n      ... on AllPostsSectionRecord {\n        id\n        _modelApiKey\n      }\n      ... on RedirectSectionRecord {\n        id\n        _modelApiKey\n        slugToRedirectTo\n      }\n    }\n    id\n    label\n    _modelApiKey\n  }\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: \"9\"\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    _publishedAt\n    slug\n    id\n    title\n    tags {\n      tag\n    }\n    seoTags {\n      description\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    author {\n      name\n      slug\n      bio\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}": types.PageDocument,
    "query Post($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  post(\n    filter: {slug: {eq: $slug}, title: {isBlank: \"false\"}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    _publishedAt\n    title\n    author {\n      name\n      bio\n      slug\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          srcSet\n          webpSrcSet\n          sizes\n          src\n          width\n          height\n          aspectRatio\n          alt\n          title\n          bgColor\n          base64\n        }\n      }\n    }\n    tags {\n      id\n      tag\n      slug\n    }\n    content {\n      value\n      links {\n        _publishedAt\n        __typename\n        slug\n        id\n        title\n        tags {\n          tag\n        }\n        seoTags {\n          description\n          image {\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              bgColor\n              base64\n            }\n          }\n        }\n        author {\n          name\n          bio\n          picture {\n            responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              bgColor\n              base64\n            }\n          }\n        }\n      }\n      blocks {\n        ... on ImageBlockRecord {\n          id\n          __typename\n          image {\n            id\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              base64\n            }\n          }\n        }\n        ... on AppCtaRecord {\n          id\n          __typename\n          text\n          title\n          googlePlayUrl\n          appstoreUrl\n        }\n        ... on NewsletterSubscriptionRecord {\n          id\n          __typename\n          buttonLabel\n          subtitle\n          title\n        }\n        ... on CtaButtonWithImageRecord {\n          id\n          __typename\n          title\n          subtitle\n          image {\n            id\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              base64\n            }\n          }\n          buttonLabel\n        }\n      }\n    }\n  }\n}": types.PostDocument,
    "query Posts($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: \"9\"\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n    skip: $skip\n  ) {\n    _publishedAt\n    slug\n    id\n    title\n    tags {\n      tag\n    }\n    seoTags {\n      description\n      image {\n        responsiveImage {\n          srcSet\n          webpSrcSet\n          sizes\n          src\n          width\n          height\n          aspectRatio\n          alt\n          title\n          bgColor\n          base64\n        }\n      }\n    }\n    author {\n      name\n      slug\n      bio\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          srcSet\n          webpSrcSet\n          sizes\n          src\n          width\n          height\n          aspectRatio\n          alt\n          title\n          bgColor\n          base64\n        }\n      }\n    }\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}": types.PostsDocument,
    "query Tag($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  tag(filter: {slug: {eq: $slug}}, locale: $locale) {\n    tag\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: \"100\"\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      _publishedAt\n      slug\n      id\n      title\n      tags {\n        tag\n      }\n      seoTags {\n        description\n        image {\n          responsiveImage {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n      author {\n        name\n        bio\n        slug\n        picture {\n          responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}": types.TagDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query About($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  page(\n    filter: {label: {eq: \"About\"}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    sections {\n      ... on AboutIntroRecord {\n        id\n        _modelApiKey\n        preHeader\n        header\n        subheader\n        introductionText {\n          value\n        }\n        images {\n          id\n          responsiveImage {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n      ... on StatsSectionRecord {\n        _modelApiKey\n        id\n        title\n        subtitle\n        statistic {\n          id\n          label\n          quantity\n          icon {\n            url\n          }\n        }\n      }\n      ... on TeamSectionRecord {\n        _modelApiKey\n        id\n        displayOptions\n        title\n        subtitle\n        showcasedMembers {\n          name\n          id\n          slug\n          bio\n          description\n          picture {\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              bgColor\n              base64\n            }\n          }\n        }\n      }\n      ... on FaqSectionRecord {\n        _modelApiKey\n        displayOptions\n        id\n        title\n        subtitle\n        questions {\n          question\n          id\n          answer {\n            value\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query About($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  page(\n    filter: {label: {eq: \"About\"}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    sections {\n      ... on AboutIntroRecord {\n        id\n        _modelApiKey\n        preHeader\n        header\n        subheader\n        introductionText {\n          value\n        }\n        images {\n          id\n          responsiveImage {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n      ... on StatsSectionRecord {\n        _modelApiKey\n        id\n        title\n        subtitle\n        statistic {\n          id\n          label\n          quantity\n          icon {\n            url\n          }\n        }\n      }\n      ... on TeamSectionRecord {\n        _modelApiKey\n        id\n        displayOptions\n        title\n        subtitle\n        showcasedMembers {\n          name\n          id\n          slug\n          bio\n          description\n          picture {\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              bgColor\n              base64\n            }\n          }\n        }\n      }\n      ... on FaqSectionRecord {\n        _modelApiKey\n        displayOptions\n        id\n        title\n        subtitle\n        questions {\n          question\n          id\n          answer {\n            value\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Author($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  author(filter: {slug: {eq: $slug}}, locale: $locale) {\n    name\n    picture {\n      responsiveImage {\n        srcSet\n        webpSrcSet\n        sizes\n        src\n        width\n        height\n        aspectRatio\n        alt\n        title\n        bgColor\n        base64\n      }\n    }\n    bio\n    description\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: \"100\"\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      _publishedAt\n      slug\n      id\n      title\n      tags {\n        tag\n      }\n      seoTags {\n        description\n        image {\n          responsiveImage {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n      author {\n        name\n        bio\n        slug\n        picture {\n          responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}"): (typeof documents)["query Author($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  author(filter: {slug: {eq: $slug}}, locale: $locale) {\n    name\n    picture {\n      responsiveImage {\n        srcSet\n        webpSrcSet\n        sizes\n        src\n        width\n        height\n        aspectRatio\n        alt\n        title\n        bgColor\n        base64\n      }\n    }\n    bio\n    description\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: \"100\"\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      _publishedAt\n      slug\n      id\n      title\n      tags {\n        tag\n      }\n      seoTags {\n        description\n        image {\n          responsiveImage {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n      author {\n        name\n        bio\n        slug\n        picture {\n          responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Changelog($slug: String) {\n  changeLog(filter: {slug: {eq: $slug}}) {\n    timeOfRelease\n    versionName\n    slug\n    content {\n      value\n    }\n  }\n}"): (typeof documents)["query Changelog($slug: String) {\n  changeLog(filter: {slug: {eq: $slug}}) {\n    timeOfRelease\n    versionName\n    slug\n    content {\n      value\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CustomColor {\n  layout {\n    mainColor {\n      red\n      blue\n      green\n    }\n  }\n}"): (typeof documents)["query CustomColor {\n  layout {\n    mainColor {\n      red\n      blue\n      green\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DocumentationHomePage {\n  documentationHome {\n    title\n    subheader\n    _modelApiKey\n    id\n    featuredPages {\n      id\n      _modelApiKey\n      title\n      subtitle\n      slug\n    }\n  }\n}"): (typeof documents)["query DocumentationHomePage {\n  documentationHome {\n    title\n    subheader\n    _modelApiKey\n    id\n    featuredPages {\n      id\n      _modelApiKey\n      title\n      subtitle\n      slug\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DocumentationPage($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  documentationPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    title\n    _modelApiKey\n    id\n    content {\n      value\n    }\n  }\n}"): (typeof documents)["query DocumentationPage($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  documentationPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    title\n    _modelApiKey\n    id\n    content {\n      value\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DocumentationSidebar {\n  allDocumentationPages(filter: {parent: {exists: \"false\"}}) {\n    children {\n      title\n      subtitle\n      slug\n      id\n      _modelApiKey\n      content {\n        value\n      }\n      children {\n        title\n        subtitle\n        slug\n        id\n        _modelApiKey\n        content {\n          value\n        }\n        children {\n          title\n          subtitle\n          slug\n          id\n          _modelApiKey\n          content {\n            value\n          }\n          children {\n            title\n            subtitle\n            slug\n            id\n            _modelApiKey\n            content {\n              value\n            }\n          }\n        }\n      }\n    }\n    title\n    subtitle\n    slug\n    id\n    _modelApiKey\n  }\n  documentationHome {\n    footerText\n    logo {\n      url\n      width\n      height\n    }\n  }\n}"): (typeof documents)["query DocumentationSidebar {\n  allDocumentationPages(filter: {parent: {exists: \"false\"}}) {\n    children {\n      title\n      subtitle\n      slug\n      id\n      _modelApiKey\n      content {\n        value\n      }\n      children {\n        title\n        subtitle\n        slug\n        id\n        _modelApiKey\n        content {\n          value\n        }\n        children {\n          title\n          subtitle\n          slug\n          id\n          _modelApiKey\n          content {\n            value\n          }\n          children {\n            title\n            subtitle\n            slug\n            id\n            _modelApiKey\n            content {\n              value\n            }\n          }\n        }\n      }\n    }\n    title\n    subtitle\n    slug\n    id\n    _modelApiKey\n  }\n  documentationHome {\n    footerText\n    logo {\n      url\n      width\n      height\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Footer($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    footerSubtitle\n    footerLogo {\n      url\n      height\n      width\n    }\n    socialMediaLinks {\n      url\n      name\n      id\n      icon {\n        url\n        height\n        width\n      }\n    }\n    footerLinks {\n      ... on LegalPageRecord {\n        id\n        slug\n        title\n        id\n      }\n    }\n  }\n}"): (typeof documents)["query Footer($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    footerSubtitle\n    footerLogo {\n      url\n      height\n      width\n    }\n    socialMediaLinks {\n      url\n      name\n      id\n      icon {\n        url\n        height\n        width\n      }\n    }\n    footerLinks {\n      ... on LegalPageRecord {\n        id\n        slug\n        title\n        id\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Legal($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    content {\n      value\n    }\n  }\n}"): (typeof documents)["query Legal($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    content {\n      value\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Locales {\n  _site {\n    locales\n  }\n}"): (typeof documents)["query Locales {\n  _site {\n    locales\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Menu($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    menu {\n      ... on MenuItemRecord {\n        id\n        title\n        _modelApiKey\n        page {\n          slug\n        }\n      }\n      ... on MenuDropdownRecord {\n        id\n        title\n        _modelApiKey\n        items {\n          ... on MenuItemRecord {\n            id\n            title\n            _modelApiKey\n            page {\n              slug\n            }\n          }\n        }\n      }\n    }\n    notification {\n      value\n    }\n  }\n  _site {\n    locales\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"): (typeof documents)["query Menu($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    menu {\n      ... on MenuItemRecord {\n        id\n        title\n        _modelApiKey\n        page {\n          slug\n        }\n      }\n      ... on MenuDropdownRecord {\n        id\n        title\n        _modelApiKey\n        items {\n          ... on MenuItemRecord {\n            id\n            title\n            _modelApiKey\n            page {\n              slug\n            }\n          }\n        }\n      }\n    }\n    notification {\n      value\n    }\n  }\n  _site {\n    locales\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Page($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $slug: String) {\n  page(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    sections {\n      ... on AboutIntroRecord {\n        id\n        _modelApiKey\n        preHeader\n        header\n        subheader\n        introductionText {\n          value\n        }\n        images {\n          id\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on ChangelogSectionRecord {\n        id\n        _modelApiKey\n        subtitle\n        title\n        featuredVersions {\n          timeOfRelease\n          versionName\n          slug\n          id\n          _modelApiKey\n        }\n      }\n      ... on StatsSectionRecord {\n        _modelApiKey\n        id\n        title\n        subtitle\n        statistic {\n          id\n          label\n          quantity\n          icon {\n            url\n          }\n        }\n      }\n      ... on TeamSectionRecord {\n        _modelApiKey\n        id\n        displayOptions\n        title\n        subtitle\n        showcasedMembers {\n          name\n          id\n          slug\n          bio\n          description\n          picture {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n      }\n      ... on FaqSectionRecord {\n        _modelApiKey\n        displayOptions\n        id\n        title\n        subtitle\n        questions {\n          question\n          id\n          answer {\n            value\n          }\n        }\n      }\n      ... on HeroSectionRecord {\n        buttons {\n          id\n          label\n          primary\n          url\n        }\n        _modelApiKey\n        id\n        heroSubtitle\n        heroTitle\n        displayOptions\n        heroImage {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on VideoSectionRecord {\n        _modelApiKey\n        id\n        videoHeader\n        videoSubheader\n        video {\n          providerUid\n          provider\n          thumbnailUrl\n        }\n        videoThumbnail {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on DetailSectionRecord {\n        _modelApiKey\n        id\n        details {\n          value\n        }\n        imagePosition\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on ReviewSectionRecord {\n        _modelApiKey\n        id\n        reviewSectionHeader\n        reviewSectionSubheader\n        displayOptions\n        reviews {\n          id\n          rating\n          review {\n            value\n            links\n            blocks\n          }\n          reviewerName\n          reviewerPicture {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n          reviewerTitle\n        }\n      }\n      ... on PricingSectionRecord {\n        _modelApiKey\n        id\n        pricingSectionHeader\n        pricingSectionSubheader\n        displayOption\n        plans {\n          id\n          yearlyPrice\n          monthlyPrice\n          tierName\n          tierDescription {\n            value\n          }\n          slug\n          planFeatures\n        }\n      }\n      ... on BrandSectionRecord {\n        _modelApiKey\n        id\n        displayOptions\n        brand {\n          _modelApiKey\n          brandName\n          brandUrl\n          id\n          brandLogo {\n            url\n          }\n        }\n      }\n      ... on FeaturedPostsSectionRecord {\n        _modelApiKey\n        id\n        featuredPostsHeader\n        featuredPostsSubheader\n        displayOptions\n        featuredPosts {\n          _publishedAt\n          slug\n          id\n          title\n          tags {\n            tag\n          }\n          seoTags {\n            description\n            image {\n              responsiveImage {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n          author {\n            name\n            bio\n            slug\n            picture {\n              responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n        }\n      }\n      ... on FeatureListSectionRecord {\n        _modelApiKey\n        id\n        featuresHeader\n        featuresSubheader\n        displayOption\n        feature {\n          _modelApiKey\n          id\n          featureTitle\n          featureDescription\n          featureIcon {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n      }\n      ... on AllPostsSectionRecord {\n        id\n        _modelApiKey\n      }\n      ... on RedirectSectionRecord {\n        id\n        _modelApiKey\n        slugToRedirectTo\n      }\n    }\n    id\n    label\n    _modelApiKey\n  }\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: \"9\"\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    _publishedAt\n    slug\n    id\n    title\n    tags {\n      tag\n    }\n    seoTags {\n      description\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    author {\n      name\n      slug\n      bio\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"): (typeof documents)["query Page($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $slug: String) {\n  page(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    sections {\n      ... on AboutIntroRecord {\n        id\n        _modelApiKey\n        preHeader\n        header\n        subheader\n        introductionText {\n          value\n        }\n        images {\n          id\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on ChangelogSectionRecord {\n        id\n        _modelApiKey\n        subtitle\n        title\n        featuredVersions {\n          timeOfRelease\n          versionName\n          slug\n          id\n          _modelApiKey\n        }\n      }\n      ... on StatsSectionRecord {\n        _modelApiKey\n        id\n        title\n        subtitle\n        statistic {\n          id\n          label\n          quantity\n          icon {\n            url\n          }\n        }\n      }\n      ... on TeamSectionRecord {\n        _modelApiKey\n        id\n        displayOptions\n        title\n        subtitle\n        showcasedMembers {\n          name\n          id\n          slug\n          bio\n          description\n          picture {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n      }\n      ... on FaqSectionRecord {\n        _modelApiKey\n        displayOptions\n        id\n        title\n        subtitle\n        questions {\n          question\n          id\n          answer {\n            value\n          }\n        }\n      }\n      ... on HeroSectionRecord {\n        buttons {\n          id\n          label\n          primary\n          url\n        }\n        _modelApiKey\n        id\n        heroSubtitle\n        heroTitle\n        displayOptions\n        heroImage {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on VideoSectionRecord {\n        _modelApiKey\n        id\n        videoHeader\n        videoSubheader\n        video {\n          providerUid\n          provider\n          thumbnailUrl\n        }\n        videoThumbnail {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on DetailSectionRecord {\n        _modelApiKey\n        id\n        details {\n          value\n        }\n        imagePosition\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n      ... on ReviewSectionRecord {\n        _modelApiKey\n        id\n        reviewSectionHeader\n        reviewSectionSubheader\n        displayOptions\n        reviews {\n          id\n          rating\n          review {\n            value\n            links\n            blocks\n          }\n          reviewerName\n          reviewerPicture {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n          reviewerTitle\n        }\n      }\n      ... on PricingSectionRecord {\n        _modelApiKey\n        id\n        pricingSectionHeader\n        pricingSectionSubheader\n        displayOption\n        plans {\n          id\n          yearlyPrice\n          monthlyPrice\n          tierName\n          tierDescription {\n            value\n          }\n          slug\n          planFeatures\n        }\n      }\n      ... on BrandSectionRecord {\n        _modelApiKey\n        id\n        displayOptions\n        brand {\n          _modelApiKey\n          brandName\n          brandUrl\n          id\n          brandLogo {\n            url\n          }\n        }\n      }\n      ... on FeaturedPostsSectionRecord {\n        _modelApiKey\n        id\n        featuredPostsHeader\n        featuredPostsSubheader\n        displayOptions\n        featuredPosts {\n          _publishedAt\n          slug\n          id\n          title\n          tags {\n            tag\n          }\n          seoTags {\n            description\n            image {\n              responsiveImage {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n          author {\n            name\n            bio\n            slug\n            picture {\n              responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n        }\n      }\n      ... on FeatureListSectionRecord {\n        _modelApiKey\n        id\n        featuresHeader\n        featuresSubheader\n        displayOption\n        feature {\n          _modelApiKey\n          id\n          featureTitle\n          featureDescription\n          featureIcon {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n      }\n      ... on AllPostsSectionRecord {\n        id\n        _modelApiKey\n      }\n      ... on RedirectSectionRecord {\n        id\n        _modelApiKey\n        slugToRedirectTo\n      }\n    }\n    id\n    label\n    _modelApiKey\n  }\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: \"9\"\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    _publishedAt\n    slug\n    id\n    title\n    tags {\n      tag\n    }\n    seoTags {\n      description\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    author {\n      name\n      slug\n      bio\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Post($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  post(\n    filter: {slug: {eq: $slug}, title: {isBlank: \"false\"}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    _publishedAt\n    title\n    author {\n      name\n      bio\n      slug\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          srcSet\n          webpSrcSet\n          sizes\n          src\n          width\n          height\n          aspectRatio\n          alt\n          title\n          bgColor\n          base64\n        }\n      }\n    }\n    tags {\n      id\n      tag\n      slug\n    }\n    content {\n      value\n      links {\n        _publishedAt\n        __typename\n        slug\n        id\n        title\n        tags {\n          tag\n        }\n        seoTags {\n          description\n          image {\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              bgColor\n              base64\n            }\n          }\n        }\n        author {\n          name\n          bio\n          picture {\n            responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              bgColor\n              base64\n            }\n          }\n        }\n      }\n      blocks {\n        ... on ImageBlockRecord {\n          id\n          __typename\n          image {\n            id\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              base64\n            }\n          }\n        }\n        ... on AppCtaRecord {\n          id\n          __typename\n          text\n          title\n          googlePlayUrl\n          appstoreUrl\n        }\n        ... on NewsletterSubscriptionRecord {\n          id\n          __typename\n          buttonLabel\n          subtitle\n          title\n        }\n        ... on CtaButtonWithImageRecord {\n          id\n          __typename\n          title\n          subtitle\n          image {\n            id\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              base64\n            }\n          }\n          buttonLabel\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query Post($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  post(\n    filter: {slug: {eq: $slug}, title: {isBlank: \"false\"}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    _publishedAt\n    title\n    author {\n      name\n      bio\n      slug\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          srcSet\n          webpSrcSet\n          sizes\n          src\n          width\n          height\n          aspectRatio\n          alt\n          title\n          bgColor\n          base64\n        }\n      }\n    }\n    tags {\n      id\n      tag\n      slug\n    }\n    content {\n      value\n      links {\n        _publishedAt\n        __typename\n        slug\n        id\n        title\n        tags {\n          tag\n        }\n        seoTags {\n          description\n          image {\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              bgColor\n              base64\n            }\n          }\n        }\n        author {\n          name\n          bio\n          picture {\n            responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              bgColor\n              base64\n            }\n          }\n        }\n      }\n      blocks {\n        ... on ImageBlockRecord {\n          id\n          __typename\n          image {\n            id\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              base64\n            }\n          }\n        }\n        ... on AppCtaRecord {\n          id\n          __typename\n          text\n          title\n          googlePlayUrl\n          appstoreUrl\n        }\n        ... on NewsletterSubscriptionRecord {\n          id\n          __typename\n          buttonLabel\n          subtitle\n          title\n        }\n        ... on CtaButtonWithImageRecord {\n          id\n          __typename\n          title\n          subtitle\n          image {\n            id\n            responsiveImage {\n              srcSet\n              webpSrcSet\n              sizes\n              src\n              width\n              height\n              aspectRatio\n              alt\n              title\n              base64\n            }\n          }\n          buttonLabel\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Posts($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: \"9\"\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n    skip: $skip\n  ) {\n    _publishedAt\n    slug\n    id\n    title\n    tags {\n      tag\n    }\n    seoTags {\n      description\n      image {\n        responsiveImage {\n          srcSet\n          webpSrcSet\n          sizes\n          src\n          width\n          height\n          aspectRatio\n          alt\n          title\n          bgColor\n          base64\n        }\n      }\n    }\n    author {\n      name\n      slug\n      bio\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          srcSet\n          webpSrcSet\n          sizes\n          src\n          width\n          height\n          aspectRatio\n          alt\n          title\n          bgColor\n          base64\n        }\n      }\n    }\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}"): (typeof documents)["query Posts($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: \"9\"\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n    skip: $skip\n  ) {\n    _publishedAt\n    slug\n    id\n    title\n    tags {\n      tag\n    }\n    seoTags {\n      description\n      image {\n        responsiveImage {\n          srcSet\n          webpSrcSet\n          sizes\n          src\n          width\n          height\n          aspectRatio\n          alt\n          title\n          bgColor\n          base64\n        }\n      }\n    }\n    author {\n      name\n      slug\n      bio\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          srcSet\n          webpSrcSet\n          sizes\n          src\n          width\n          height\n          aspectRatio\n          alt\n          title\n          bgColor\n          base64\n        }\n      }\n    }\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Tag($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  tag(filter: {slug: {eq: $slug}}, locale: $locale) {\n    tag\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: \"100\"\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      _publishedAt\n      slug\n      id\n      title\n      tags {\n        tag\n      }\n      seoTags {\n        description\n        image {\n          responsiveImage {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n      author {\n        name\n        bio\n        slug\n        picture {\n          responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}"): (typeof documents)["query Tag($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  tag(filter: {slug: {eq: $slug}}, locale: $locale) {\n    tag\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: \"100\"\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      _publishedAt\n      slug\n      id\n      title\n      tags {\n        tag\n      }\n      seoTags {\n        description\n        image {\n          responsiveImage {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n      author {\n        name\n        bio\n        slug\n        picture {\n          responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n            srcSet\n            webpSrcSet\n            sizes\n            src\n            width\n            height\n            aspectRatio\n            alt\n            title\n            bgColor\n            base64\n          }\n        }\n      }\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;